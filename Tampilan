import tkinter as tk
from tkinter import messagebox
import re

# Kelas utama untuk kalkulator
class Kalkulator:
    def __init__(self, root):
        self.root = root
        self.root.title("Kalkulator")
        self.root.geometry("360x600")
        self.root.resizable(True, True)
        self.root.configure(bg="#121212")
        
        self.entry = tk.Entry(root, font=("Arial", 32), justify="right", bg="#1E1E1E", fg="#E0E0E0", borderwidth=0)
        self.entry.grid(row=0, column=0, columnspan=4, sticky="nsew", padx=10, pady=20, ipady=15)
        self.entry.insert(0, "0")
        self.entry.bind("<KeyRelease>", self.format_number)
        
        # Tambahkan binding keyboard
        self.root.bind("<Return>", lambda event: self.button_click("="))
        self.root.bind("<BackSpace>", lambda event: self.button_click("⌫"))
        
        buttons = [
            ('C', '⌫', '%', '÷'),
            ('7', '8', '9', 'x'),
            ('4', '5', '6', '-'),
            ('1', '2', '3', '+'),
            ('0', '00', '.', '=')
        ]
        
        button_colors = {
            "C": "#757575", "=": "#424242", "÷": "#424242", "x": "#424242", 
            "-": "#424242", "+": "#424242", "⌫": "#757575", "%": "#757575", "00": "#2E2E2E"
        }
        
        for row_index, row_values in enumerate(buttons, start=1):
            for col_index, button in enumerate(row_values):
                if button:
                    tk.Button(
                        root, text=button, font=("Arial", 20), width=5, height=2,
                        bg=button_colors.get(button, "#333333"), fg="#FFFFFF", 
                        activebackground="#555555", activeforeground="#FFFFFF",
                        command=lambda b=button: self.button_click(b),
                        relief="flat"
                    ).grid(row=row_index, column=col_index, sticky="nsew", padx=5, pady=5)

        for i in range(6):
            root.grid_rowconfigure(i, weight=1)
        for i in range(4):
            root.grid_columnconfigure(i, weight=1)

    def button_click(self, button):
        current_text = self.entry.get().replace(".", "")
        
        if button == "C":
            self.entry.delete(0, tk.END)
            self.entry.insert(0, "0")
        elif button == "⌫":
            if len(current_text) > 1:
                self.entry.delete(0, tk.END)
                self.entry.insert(0, current_text[:-1])
            else:
                self.reset_entry()
        elif button == "=":
            try:
                expression = current_text.replace("÷", "/").replace("x", "*")
                expression = self.convert_percent(expression)
                if expression[-1] in "÷x/-+%":
                    raise Exception("Invalid input")
                
                result = eval(expression)
                # Format hasil
                if result == int(result):
                    formatted_result = "{:,}".format(int(result)).replace(",", ".")
                else:
                    formatted_result = "{:,}".format(result).replace(",", ".")
                    
                self.entry.delete(0, tk.END)
                self.entry.insert(0, formatted_result)
            except ZeroDivisionError:
                messagebox.showerror("Error", "Tidak dapat membagi dengan nol")
                self.reset_entry()
            except Exception:
                messagebox.showerror("Error", "Input tidak valid")
                self.reset_entry()
        else:
            if current_text == "0" and button not in "÷x/-+.%":
                self.entry.delete(0, tk.END)
            if current_text and current_text[-1] in "÷x/-+%" and button in "÷x/-+%":
                self.entry.delete(len(current_text) - 1, tk.END)
            self.entry.insert(tk.END, button)
        self.format_number()

    def convert_percent(self, expression):
        pattern = r'(\d+)%'
        matches = re.findall(pattern, expression)
        for match in matches:
            expression = expression.replace(f"{match}%", f"({match}/100)")
        return expression

    def format_number(self, event=None):
        current_text = self.entry.get().replace(".", "")
        if current_text and current_text.isdigit():
            formatted_text = re.sub(r'(?<=\d)(?=(\d{3})+(?!\d))', '.', current_text)
            self.entry.delete(0, tk.END)
            self.entry.insert(0, formatted_text)

    def reset_entry(self):
        self.entry.delete(0, tk.END)
        self.entry.insert(0, "0")

# Jalankan aplikasi
if __name__ == "__main__":
    root = tk.Tk()
    Kalkulator(root)
    root.mainloop()
